Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> statement END statement
Rule 2     statement -> SKIP
Rule 3     statement -> NAME LPAREN expression RPAREN
Rule 4     statement -> PRINT LPAREN expression RPAREN
Rule 5     statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
Rule 6     statement -> IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
Rule 7     statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
Rule 8     statement -> IF LPAREN expression RPAREN SKIP SKIP
Rule 9     statement -> WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET
Rule 10    statement -> PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET
Rule 11    statement -> VAR NAME ASSIGN expression
Rule 12    statement -> NAME ASSIGN expression
Rule 13    statement -> VAR NAME
Rule 14    expression -> expression PLUS expression
Rule 15    expression -> expression MINUS expression
Rule 16    expression -> expression MUL expression
Rule 17    expression -> expression DIV expression
Rule 18    expression -> expression LT expression
Rule 19    expression -> expression AND expression
Rule 20    expression -> expression EQUAL expression
Rule 21    expression -> LPAREN expression RPAREN
Rule 22    expression -> MINUS expression
Rule 23    expression -> BANG expression
Rule 24    expression -> INT
Rule 25    expression -> NAME

Terminals, with rules where they appear

AND                  : 19
ASSIGN               : 11 12
BANG                 : 23
DIV                  : 17
END                  : 1
EQUAL                : 20
IF                   : 5 6 7 8
INT                  : 24
LBRACKET             : 5 5 6 7 9 10
LPAREN               : 3 4 5 6 7 8 9 10 21
LT                   : 18
MINUS                : 15 22
MUL                  : 16
NAME                 : 3 10 11 12 13 25
PLUS                 : 14
PRINT                : 4
PROC                 : 10
RBRACKET             : 5 5 6 7 9 10
RPAREN               : 3 4 5 6 7 8 9 10 21
SKIP                 : 2 6 7 8 8
VAR                  : 11 13
WHILE                : 9
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 5 6 7 8 9 10 11 12 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 22 23
statement            : 1 1 5 5 6 7 9 10 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . statement END statement
    (2) statement -> . SKIP
    (3) statement -> . NAME LPAREN expression RPAREN
    (4) statement -> . PRINT LPAREN expression RPAREN
    (5) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> . IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> . IF LPAREN expression RPAREN SKIP SKIP
    (9) statement -> . WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET
    (10) statement -> . PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET
    (11) statement -> . VAR NAME ASSIGN expression
    (12) statement -> . NAME ASSIGN expression
    (13) statement -> . VAR NAME

    SKIP            shift and go to state 2
    NAME            shift and go to state 1
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 5
    PROC            shift and go to state 3
    VAR             shift and go to state 4

    statement                      shift and go to state 6

state 1

    (3) statement -> NAME . LPAREN expression RPAREN
    (12) statement -> NAME . ASSIGN expression

    LPAREN          shift and go to state 9
    ASSIGN          shift and go to state 10


state 2

    (2) statement -> SKIP .

    RBRACKET        reduce using rule 2 (statement -> SKIP .)
    END             reduce using rule 2 (statement -> SKIP .)
    $end            reduce using rule 2 (statement -> SKIP .)


state 3

    (10) statement -> PROC . NAME LPAREN expression RPAREN LBRACKET statement RBRACKET

    NAME            shift and go to state 11


state 4

    (11) statement -> VAR . NAME ASSIGN expression
    (13) statement -> VAR . NAME

    NAME            shift and go to state 12


state 5

    (9) statement -> WHILE . LPAREN expression RPAREN LBRACKET statement RBRACKET

    LPAREN          shift and go to state 13


state 6

    (0) S' -> statement .
    (1) statement -> statement . END statement

    END             shift and go to state 14


state 7

    (4) statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 15


state 8

    (5) statement -> IF . LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> IF . LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> IF . LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> IF . LPAREN expression RPAREN SKIP SKIP

    LPAREN          shift and go to state 16


state 9

    (3) statement -> NAME LPAREN . expression RPAREN
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 21

state 10

    (12) statement -> NAME ASSIGN . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 23

state 11

    (10) statement -> PROC NAME . LPAREN expression RPAREN LBRACKET statement RBRACKET

    LPAREN          shift and go to state 24


state 12

    (11) statement -> VAR NAME . ASSIGN expression
    (13) statement -> VAR NAME .

    ASSIGN          shift and go to state 25
    RBRACKET        reduce using rule 13 (statement -> VAR NAME .)
    END             reduce using rule 13 (statement -> VAR NAME .)
    $end            reduce using rule 13 (statement -> VAR NAME .)


state 13

    (9) statement -> WHILE LPAREN . expression RPAREN LBRACKET statement RBRACKET
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 26

state 14

    (1) statement -> statement END . statement
    (1) statement -> . statement END statement
    (2) statement -> . SKIP
    (3) statement -> . NAME LPAREN expression RPAREN
    (4) statement -> . PRINT LPAREN expression RPAREN
    (5) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> . IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> . IF LPAREN expression RPAREN SKIP SKIP
    (9) statement -> . WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET
    (10) statement -> . PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET
    (11) statement -> . VAR NAME ASSIGN expression
    (12) statement -> . NAME ASSIGN expression
    (13) statement -> . VAR NAME

    SKIP            shift and go to state 2
    NAME            shift and go to state 1
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 5
    PROC            shift and go to state 3
    VAR             shift and go to state 4

    statement                      shift and go to state 27

state 15

    (4) statement -> PRINT LPAREN . expression RPAREN
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 28

state 16

    (5) statement -> IF LPAREN . expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> IF LPAREN . expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> IF LPAREN . expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> IF LPAREN . expression RPAREN SKIP SKIP
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 29

state 17

    (25) expression -> NAME .

    PLUS            reduce using rule 25 (expression -> NAME .)
    MINUS           reduce using rule 25 (expression -> NAME .)
    MUL             reduce using rule 25 (expression -> NAME .)
    DIV             reduce using rule 25 (expression -> NAME .)
    LT              reduce using rule 25 (expression -> NAME .)
    AND             reduce using rule 25 (expression -> NAME .)
    EQUAL           reduce using rule 25 (expression -> NAME .)
    RPAREN          reduce using rule 25 (expression -> NAME .)
    END             reduce using rule 25 (expression -> NAME .)
    $end            reduce using rule 25 (expression -> NAME .)
    RBRACKET        reduce using rule 25 (expression -> NAME .)


state 18

    (24) expression -> INT .

    PLUS            reduce using rule 24 (expression -> INT .)
    MINUS           reduce using rule 24 (expression -> INT .)
    MUL             reduce using rule 24 (expression -> INT .)
    DIV             reduce using rule 24 (expression -> INT .)
    LT              reduce using rule 24 (expression -> INT .)
    AND             reduce using rule 24 (expression -> INT .)
    EQUAL           reduce using rule 24 (expression -> INT .)
    RPAREN          reduce using rule 24 (expression -> INT .)
    END             reduce using rule 24 (expression -> INT .)
    $end            reduce using rule 24 (expression -> INT .)
    RBRACKET        reduce using rule 24 (expression -> INT .)


state 19

    (23) expression -> BANG . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 30

state 20

    (21) expression -> LPAREN . expression RPAREN
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 31

state 21

    (3) statement -> NAME LPAREN expression . RPAREN
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    RPAREN          shift and go to state 33
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    AND             shift and go to state 32
    EQUAL           shift and go to state 34


state 22

    (22) expression -> MINUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 40

state 23

    (12) statement -> NAME ASSIGN expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    RBRACKET        reduce using rule 12 (statement -> NAME ASSIGN expression .)
    END             reduce using rule 12 (statement -> NAME ASSIGN expression .)
    $end            reduce using rule 12 (statement -> NAME ASSIGN expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    AND             shift and go to state 32
    EQUAL           shift and go to state 34


state 24

    (10) statement -> PROC NAME LPAREN . expression RPAREN LBRACKET statement RBRACKET
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 41

state 25

    (11) statement -> VAR NAME ASSIGN . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 42

state 26

    (9) statement -> WHILE LPAREN expression . RPAREN LBRACKET statement RBRACKET
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    RPAREN          shift and go to state 43
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    AND             shift and go to state 32
    EQUAL           shift and go to state 34


state 27

    (1) statement -> statement END statement .
    (1) statement -> statement . END statement

    RBRACKET        reduce using rule 1 (statement -> statement END statement .)
    END             reduce using rule 1 (statement -> statement END statement .)
    $end            reduce using rule 1 (statement -> statement END statement .)

  ! END             [ shift and go to state 14 ]


state 28

    (4) statement -> PRINT LPAREN expression . RPAREN
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    RPAREN          shift and go to state 44
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    AND             shift and go to state 32
    EQUAL           shift and go to state 34


state 29

    (5) statement -> IF LPAREN expression . RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> IF LPAREN expression . RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> IF LPAREN expression . RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> IF LPAREN expression . RPAREN SKIP SKIP
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    RPAREN          shift and go to state 45
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    AND             shift and go to state 32
    EQUAL           shift and go to state 34


state 30

    (23) expression -> BANG expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    PLUS            reduce using rule 23 (expression -> BANG expression .)
    MINUS           reduce using rule 23 (expression -> BANG expression .)
    MUL             reduce using rule 23 (expression -> BANG expression .)
    DIV             reduce using rule 23 (expression -> BANG expression .)
    LT              reduce using rule 23 (expression -> BANG expression .)
    AND             reduce using rule 23 (expression -> BANG expression .)
    EQUAL           reduce using rule 23 (expression -> BANG expression .)
    RPAREN          reduce using rule 23 (expression -> BANG expression .)
    END             reduce using rule 23 (expression -> BANG expression .)
    $end            reduce using rule 23 (expression -> BANG expression .)
    RBRACKET        reduce using rule 23 (expression -> BANG expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MUL             [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! LT              [ shift and go to state 35 ]
  ! AND             [ shift and go to state 32 ]
  ! EQUAL           [ shift and go to state 34 ]


state 31

    (21) expression -> LPAREN expression . RPAREN
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    RPAREN          shift and go to state 46
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    AND             shift and go to state 32
    EQUAL           shift and go to state 34


state 32

    (19) expression -> expression AND . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 47

state 33

    (3) statement -> NAME LPAREN expression RPAREN .

    RBRACKET        reduce using rule 3 (statement -> NAME LPAREN expression RPAREN .)
    END             reduce using rule 3 (statement -> NAME LPAREN expression RPAREN .)
    $end            reduce using rule 3 (statement -> NAME LPAREN expression RPAREN .)


state 34

    (20) expression -> expression EQUAL . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 48

state 35

    (18) expression -> expression LT . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 49

state 36

    (14) expression -> expression PLUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 50

state 37

    (16) expression -> expression MUL . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 51

state 38

    (17) expression -> expression DIV . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 52

state 39

    (15) expression -> expression MINUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression LT expression
    (19) expression -> . expression AND expression
    (20) expression -> . expression EQUAL expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . MINUS expression
    (23) expression -> . BANG expression
    (24) expression -> . INT
    (25) expression -> . NAME

    LPAREN          shift and go to state 20
    MINUS           shift and go to state 22
    BANG            shift and go to state 19
    INT             shift and go to state 18
    NAME            shift and go to state 17

    expression                     shift and go to state 53

state 40

    (22) expression -> MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    PLUS            reduce using rule 22 (expression -> MINUS expression .)
    MINUS           reduce using rule 22 (expression -> MINUS expression .)
    MUL             reduce using rule 22 (expression -> MINUS expression .)
    DIV             reduce using rule 22 (expression -> MINUS expression .)
    LT              reduce using rule 22 (expression -> MINUS expression .)
    AND             reduce using rule 22 (expression -> MINUS expression .)
    EQUAL           reduce using rule 22 (expression -> MINUS expression .)
    RPAREN          reduce using rule 22 (expression -> MINUS expression .)
    END             reduce using rule 22 (expression -> MINUS expression .)
    $end            reduce using rule 22 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 22 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MUL             [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! LT              [ shift and go to state 35 ]
  ! AND             [ shift and go to state 32 ]
  ! EQUAL           [ shift and go to state 34 ]


state 41

    (10) statement -> PROC NAME LPAREN expression . RPAREN LBRACKET statement RBRACKET
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    RPAREN          shift and go to state 54
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    AND             shift and go to state 32
    EQUAL           shift and go to state 34


state 42

    (11) statement -> VAR NAME ASSIGN expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    RBRACKET        reduce using rule 11 (statement -> VAR NAME ASSIGN expression .)
    END             reduce using rule 11 (statement -> VAR NAME ASSIGN expression .)
    $end            reduce using rule 11 (statement -> VAR NAME ASSIGN expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    AND             shift and go to state 32
    EQUAL           shift and go to state 34


state 43

    (9) statement -> WHILE LPAREN expression RPAREN . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 55


state 44

    (4) statement -> PRINT LPAREN expression RPAREN .

    RBRACKET        reduce using rule 4 (statement -> PRINT LPAREN expression RPAREN .)
    END             reduce using rule 4 (statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 4 (statement -> PRINT LPAREN expression RPAREN .)


state 45

    (5) statement -> IF LPAREN expression RPAREN . LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> IF LPAREN expression RPAREN . SKIP LBRACKET statement RBRACKET
    (7) statement -> IF LPAREN expression RPAREN . LBRACKET statement RBRACKET SKIP
    (8) statement -> IF LPAREN expression RPAREN . SKIP SKIP

    LBRACKET        shift and go to state 57
    SKIP            shift and go to state 56


state 46

    (21) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 21 (expression -> LPAREN expression RPAREN .)


state 47

    (19) expression -> expression AND expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    AND             reduce using rule 19 (expression -> expression AND expression .)
    RPAREN          reduce using rule 19 (expression -> expression AND expression .)
    END             reduce using rule 19 (expression -> expression AND expression .)
    $end            reduce using rule 19 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 19 (expression -> expression AND expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38
    LT              shift and go to state 35
    EQUAL           shift and go to state 34

  ! PLUS            [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! MUL             [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 19 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 32 ]


state 48

    (20) expression -> expression EQUAL expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    LT              reduce using rule 20 (expression -> expression EQUAL expression .)
    AND             reduce using rule 20 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 20 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 20 (expression -> expression EQUAL expression .)
    END             reduce using rule 20 (expression -> expression EQUAL expression .)
    $end            reduce using rule 20 (expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 20 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38

  ! PLUS            [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
  ! MUL             [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
  ! DIV             [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
  ! LT              [ shift and go to state 35 ]
  ! AND             [ shift and go to state 32 ]
  ! EQUAL           [ shift and go to state 34 ]


state 49

    (18) expression -> expression LT expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    LT              reduce using rule 18 (expression -> expression LT expression .)
    AND             reduce using rule 18 (expression -> expression LT expression .)
    EQUAL           reduce using rule 18 (expression -> expression LT expression .)
    RPAREN          reduce using rule 18 (expression -> expression LT expression .)
    END             reduce using rule 18 (expression -> expression LT expression .)
    $end            reduce using rule 18 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 18 (expression -> expression LT expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 39
    MUL             shift and go to state 37
    DIV             shift and go to state 38

  ! PLUS            [ reduce using rule 18 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 18 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 18 (expression -> expression LT expression .) ]
  ! LT              [ shift and go to state 35 ]
  ! AND             [ shift and go to state 32 ]
  ! EQUAL           [ shift and go to state 34 ]


state 50

    (14) expression -> expression PLUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    PLUS            reduce using rule 14 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 14 (expression -> expression PLUS expression .)
    LT              reduce using rule 14 (expression -> expression PLUS expression .)
    AND             reduce using rule 14 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 14 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression PLUS expression .)
    END             reduce using rule 14 (expression -> expression PLUS expression .)
    $end            reduce using rule 14 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 14 (expression -> expression PLUS expression .)
    MUL             shift and go to state 37
    DIV             shift and go to state 38

  ! MUL             [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 39 ]
  ! LT              [ shift and go to state 35 ]
  ! AND             [ shift and go to state 32 ]
  ! EQUAL           [ shift and go to state 34 ]


state 51

    (16) expression -> expression MUL expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    PLUS            reduce using rule 16 (expression -> expression MUL expression .)
    MINUS           reduce using rule 16 (expression -> expression MUL expression .)
    MUL             reduce using rule 16 (expression -> expression MUL expression .)
    DIV             reduce using rule 16 (expression -> expression MUL expression .)
    LT              reduce using rule 16 (expression -> expression MUL expression .)
    AND             reduce using rule 16 (expression -> expression MUL expression .)
    EQUAL           reduce using rule 16 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 16 (expression -> expression MUL expression .)
    END             reduce using rule 16 (expression -> expression MUL expression .)
    $end            reduce using rule 16 (expression -> expression MUL expression .)
    RBRACKET        reduce using rule 16 (expression -> expression MUL expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MUL             [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! LT              [ shift and go to state 35 ]
  ! AND             [ shift and go to state 32 ]
  ! EQUAL           [ shift and go to state 34 ]


state 52

    (17) expression -> expression DIV expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    PLUS            reduce using rule 17 (expression -> expression DIV expression .)
    MINUS           reduce using rule 17 (expression -> expression DIV expression .)
    MUL             reduce using rule 17 (expression -> expression DIV expression .)
    DIV             reduce using rule 17 (expression -> expression DIV expression .)
    LT              reduce using rule 17 (expression -> expression DIV expression .)
    AND             reduce using rule 17 (expression -> expression DIV expression .)
    EQUAL           reduce using rule 17 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 17 (expression -> expression DIV expression .)
    END             reduce using rule 17 (expression -> expression DIV expression .)
    $end            reduce using rule 17 (expression -> expression DIV expression .)
    RBRACKET        reduce using rule 17 (expression -> expression DIV expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MUL             [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! LT              [ shift and go to state 35 ]
  ! AND             [ shift and go to state 32 ]
  ! EQUAL           [ shift and go to state 34 ]


state 53

    (15) expression -> expression MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . LT expression
    (19) expression -> expression . AND expression
    (20) expression -> expression . EQUAL expression

    PLUS            reduce using rule 15 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 15 (expression -> expression MINUS expression .)
    LT              reduce using rule 15 (expression -> expression MINUS expression .)
    AND             reduce using rule 15 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 15 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression MINUS expression .)
    END             reduce using rule 15 (expression -> expression MINUS expression .)
    $end            reduce using rule 15 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 15 (expression -> expression MINUS expression .)
    MUL             shift and go to state 37
    DIV             shift and go to state 38

  ! MUL             [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 39 ]
  ! LT              [ shift and go to state 35 ]
  ! AND             [ shift and go to state 32 ]
  ! EQUAL           [ shift and go to state 34 ]


state 54

    (10) statement -> PROC NAME LPAREN expression RPAREN . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 58


state 55

    (9) statement -> WHILE LPAREN expression RPAREN LBRACKET . statement RBRACKET
    (1) statement -> . statement END statement
    (2) statement -> . SKIP
    (3) statement -> . NAME LPAREN expression RPAREN
    (4) statement -> . PRINT LPAREN expression RPAREN
    (5) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> . IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> . IF LPAREN expression RPAREN SKIP SKIP
    (9) statement -> . WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET
    (10) statement -> . PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET
    (11) statement -> . VAR NAME ASSIGN expression
    (12) statement -> . NAME ASSIGN expression
    (13) statement -> . VAR NAME

    SKIP            shift and go to state 2
    NAME            shift and go to state 1
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 5
    PROC            shift and go to state 3
    VAR             shift and go to state 4

    statement                      shift and go to state 59

state 56

    (6) statement -> IF LPAREN expression RPAREN SKIP . LBRACKET statement RBRACKET
    (8) statement -> IF LPAREN expression RPAREN SKIP . SKIP

    LBRACKET        shift and go to state 61
    SKIP            shift and go to state 60


state 57

    (5) statement -> IF LPAREN expression RPAREN LBRACKET . statement RBRACKET LBRACKET statement RBRACKET
    (7) statement -> IF LPAREN expression RPAREN LBRACKET . statement RBRACKET SKIP
    (1) statement -> . statement END statement
    (2) statement -> . SKIP
    (3) statement -> . NAME LPAREN expression RPAREN
    (4) statement -> . PRINT LPAREN expression RPAREN
    (5) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> . IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> . IF LPAREN expression RPAREN SKIP SKIP
    (9) statement -> . WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET
    (10) statement -> . PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET
    (11) statement -> . VAR NAME ASSIGN expression
    (12) statement -> . NAME ASSIGN expression
    (13) statement -> . VAR NAME

    SKIP            shift and go to state 2
    NAME            shift and go to state 1
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 5
    PROC            shift and go to state 3
    VAR             shift and go to state 4

    statement                      shift and go to state 62

state 58

    (10) statement -> PROC NAME LPAREN expression RPAREN LBRACKET . statement RBRACKET
    (1) statement -> . statement END statement
    (2) statement -> . SKIP
    (3) statement -> . NAME LPAREN expression RPAREN
    (4) statement -> . PRINT LPAREN expression RPAREN
    (5) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> . IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> . IF LPAREN expression RPAREN SKIP SKIP
    (9) statement -> . WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET
    (10) statement -> . PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET
    (11) statement -> . VAR NAME ASSIGN expression
    (12) statement -> . NAME ASSIGN expression
    (13) statement -> . VAR NAME

    SKIP            shift and go to state 2
    NAME            shift and go to state 1
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 5
    PROC            shift and go to state 3
    VAR             shift and go to state 4

    statement                      shift and go to state 63

state 59

    (9) statement -> WHILE LPAREN expression RPAREN LBRACKET statement . RBRACKET
    (1) statement -> statement . END statement

    RBRACKET        shift and go to state 64
    END             shift and go to state 14


state 60

    (8) statement -> IF LPAREN expression RPAREN SKIP SKIP .

    RBRACKET        reduce using rule 8 (statement -> IF LPAREN expression RPAREN SKIP SKIP .)
    END             reduce using rule 8 (statement -> IF LPAREN expression RPAREN SKIP SKIP .)
    $end            reduce using rule 8 (statement -> IF LPAREN expression RPAREN SKIP SKIP .)


state 61

    (6) statement -> IF LPAREN expression RPAREN SKIP LBRACKET . statement RBRACKET
    (1) statement -> . statement END statement
    (2) statement -> . SKIP
    (3) statement -> . NAME LPAREN expression RPAREN
    (4) statement -> . PRINT LPAREN expression RPAREN
    (5) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> . IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> . IF LPAREN expression RPAREN SKIP SKIP
    (9) statement -> . WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET
    (10) statement -> . PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET
    (11) statement -> . VAR NAME ASSIGN expression
    (12) statement -> . NAME ASSIGN expression
    (13) statement -> . VAR NAME

    SKIP            shift and go to state 2
    NAME            shift and go to state 1
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 5
    PROC            shift and go to state 3
    VAR             shift and go to state 4

    statement                      shift and go to state 65

state 62

    (5) statement -> IF LPAREN expression RPAREN LBRACKET statement . RBRACKET LBRACKET statement RBRACKET
    (7) statement -> IF LPAREN expression RPAREN LBRACKET statement . RBRACKET SKIP
    (1) statement -> statement . END statement

    RBRACKET        shift and go to state 66
    END             shift and go to state 14


state 63

    (10) statement -> PROC NAME LPAREN expression RPAREN LBRACKET statement . RBRACKET
    (1) statement -> statement . END statement

    RBRACKET        shift and go to state 67
    END             shift and go to state 14


state 64

    (9) statement -> WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET .

    RBRACKET        reduce using rule 9 (statement -> WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET .)
    END             reduce using rule 9 (statement -> WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET .)
    $end            reduce using rule 9 (statement -> WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET .)


state 65

    (6) statement -> IF LPAREN expression RPAREN SKIP LBRACKET statement . RBRACKET
    (1) statement -> statement . END statement

    RBRACKET        shift and go to state 68
    END             shift and go to state 14


state 66

    (5) statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET . LBRACKET statement RBRACKET
    (7) statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET . SKIP

    LBRACKET        shift and go to state 70
    SKIP            shift and go to state 69


state 67

    (10) statement -> PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET .

    RBRACKET        reduce using rule 10 (statement -> PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET .)
    END             reduce using rule 10 (statement -> PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET .)
    $end            reduce using rule 10 (statement -> PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET .)


state 68

    (6) statement -> IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET .

    RBRACKET        reduce using rule 6 (statement -> IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET .)
    END             reduce using rule 6 (statement -> IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET .)
    $end            reduce using rule 6 (statement -> IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET .)


state 69

    (7) statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP .

    RBRACKET        reduce using rule 7 (statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP .)
    END             reduce using rule 7 (statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP .)
    $end            reduce using rule 7 (statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP .)


state 70

    (5) statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET . statement RBRACKET
    (1) statement -> . statement END statement
    (2) statement -> . SKIP
    (3) statement -> . NAME LPAREN expression RPAREN
    (4) statement -> . PRINT LPAREN expression RPAREN
    (5) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET
    (6) statement -> . IF LPAREN expression RPAREN SKIP LBRACKET statement RBRACKET
    (7) statement -> . IF LPAREN expression RPAREN LBRACKET statement RBRACKET SKIP
    (8) statement -> . IF LPAREN expression RPAREN SKIP SKIP
    (9) statement -> . WHILE LPAREN expression RPAREN LBRACKET statement RBRACKET
    (10) statement -> . PROC NAME LPAREN expression RPAREN LBRACKET statement RBRACKET
    (11) statement -> . VAR NAME ASSIGN expression
    (12) statement -> . NAME ASSIGN expression
    (13) statement -> . VAR NAME

    SKIP            shift and go to state 2
    NAME            shift and go to state 1
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 5
    PROC            shift and go to state 3
    VAR             shift and go to state 4

    statement                      shift and go to state 71

state 71

    (5) statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement . RBRACKET
    (1) statement -> statement . END statement

    RBRACKET        shift and go to state 72
    END             shift and go to state 14


state 72

    (5) statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET .

    RBRACKET        reduce using rule 5 (statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET .)
    END             reduce using rule 5 (statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET .)
    $end            reduce using rule 5 (statement -> IF LPAREN expression RPAREN LBRACKET statement RBRACKET LBRACKET statement RBRACKET .)

